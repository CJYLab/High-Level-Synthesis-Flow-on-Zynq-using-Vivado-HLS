// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rgb2yuv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] x_2_fu_219_p2;
reg   [15:0] x_2_reg_561;
wire    ap_CS_fsm_state2;
wire   [22:0] tmp_22_fu_249_p2;
reg   [22:0] tmp_22_reg_566;
wire   [0:0] exitcond1_fu_214_p2;
wire   [15:0] y_2_fu_270_p2;
reg   [15:0] y_2_reg_574;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_24_cast_fu_285_p1;
reg   [63:0] tmp_24_cast_reg_579;
wire   [0:0] exitcond_fu_265_p2;
reg   [7:0] R_reg_601;
wire    ap_CS_fsm_state6;
reg   [7:0] G_reg_608;
reg   [7:0] B_reg_615;
wire   [15:0] tmp_33_fu_296_p2;
reg   [15:0] tmp_33_reg_623;
reg   [7:0] tmp_27_reg_628;
wire    ap_CS_fsm_state7;
wire   [15:0] tmp_30_fu_424_p2;
reg   [15:0] tmp_30_reg_633;
wire  signed [15:0] grp_fu_530_p3;
reg  signed [15:0] tmp5_reg_638;
reg   [7:0] tmp_37_reg_643;
wire    ap_CS_fsm_state8;
reg   [15:0] x_reg_192;
reg   [15:0] y_reg_203;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [12:0] tmp_fu_225_p1;
wire   [14:0] tmp_21_fu_237_p1;
wire   [22:0] p_shl_cast_fu_229_p3;
wire   [22:0] p_shl7_cast_fu_241_p3;
wire   [22:0] tmp_cast_fu_276_p1;
wire   [22:0] tmp_24_fu_280_p2;
wire   [7:0] tmp_33_fu_296_p0;
wire   [13:0] p_shl5_fu_305_p3;
wire   [8:0] p_shl6_fu_316_p3;
wire   [14:0] p_shl4_fu_333_p3;
wire   [14:0] p_shl6_cast_fu_323_p1;
wire   [14:0] p_shl5_cast_fu_312_p1;
wire   [14:0] tmp2_fu_347_p2;
wire   [15:0] tmp2_cast_fu_353_p1;
wire   [15:0] p_shl4_cast_fu_340_p1;
wire   [8:0] tmp_35_cast2_fu_330_p1;
wire   [8:0] tmp4_fu_363_p2;
wire   [12:0] grp_fu_521_p3;
wire   [15:0] tmp3_cast_fu_373_p1;
wire   [15:0] tmp1_fu_357_p2;
wire   [15:0] tmp_26_fu_376_p2;
wire   [7:0] tmp_29_fu_392_p0;
wire   [15:0] tmp_35_cast1_fu_327_p1;
wire   [14:0] p_shl2_fu_398_p3;
wire   [11:0] p_shl3_fu_409_p3;
wire   [15:0] p_shl2_cast_fu_405_p1;
wire   [15:0] p_shl3_cast_fu_420_p1;
wire   [12:0] p_shl3_cast9_fu_416_p1;
wire   [12:0] p_neg_fu_430_p2;
wire   [8:0] p_shl1_fu_440_p3;
wire  signed [13:0] p_neg_cast_fu_436_p1;
wire   [13:0] p_shl1_cast_fu_447_p1;
wire   [13:0] tmp_35_fu_451_p2;
wire   [13:0] tmp8_fu_457_p2;
wire  signed [15:0] tmp8_cast_fu_463_p1;
wire  signed [15:0] grp_fu_538_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp_36_fu_467_p2;
wire   [15:0] tmp6_fu_488_p2;
(* use_dsp48 = "no" *) wire   [15:0] tmp_31_fu_493_p2;
wire   [7:0] tmp_32_fu_498_p4;
wire   [7:0] grp_fu_521_p0;
wire   [5:0] grp_fu_521_p1;
wire   [8:0] grp_fu_521_p2;
wire   [7:0] grp_fu_530_p0;
wire  signed [6:0] grp_fu_530_p1;
wire   [15:0] grp_fu_530_p2;
wire   [7:0] grp_fu_538_p0;
wire  signed [7:0] grp_fu_538_p1;
reg   [8:0] ap_NS_fsm;
wire   [12:0] grp_fu_521_p00;
wire   [12:0] grp_fu_521_p20;
wire   [14:0] grp_fu_530_p00;
wire   [15:0] tmp_33_fu_296_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

yuv_filter_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
yuv_filter_mac_mubkb_U1(
    .din0(grp_fu_521_p0),
    .din1(grp_fu_521_p1),
    .din2(grp_fu_521_p2),
    .dout(grp_fu_521_p3)
);

yuv_filter_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mucud_U2(
    .din0(grp_fu_530_p0),
    .din1(grp_fu_530_p1),
    .din2(grp_fu_530_p2),
    .dout(grp_fu_530_p3)
);

yuv_filter_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mudEe_U3(
    .din0(grp_fu_538_p0),
    .din1(grp_fu_538_p1),
    .din2(tmp_33_reg_623),
    .dout(grp_fu_538_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_265_p2 == 1'd1))) begin
        x_reg_192 <= x_2_reg_561;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_reg_192 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_reg_203 <= y_2_reg_574;
    end else if (((exitcond1_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_203 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        B_reg_615 <= in_channels_ch3_q0;
        G_reg_608 <= in_channels_ch2_q0;
        R_reg_601 <= in_channels_ch1_q0;
        tmp_33_reg_623[15 : 1] <= tmp_33_fu_296_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp5_reg_638 <= grp_fu_530_p3;
        tmp_27_reg_628 <= {{tmp_26_fu_376_p2[15:8]}};
        tmp_30_reg_633[15 : 4] <= tmp_30_fu_424_p2[15 : 4];
        tmp_37_reg_643 <= {{tmp_36_fu_467_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_22_reg_566[22 : 8] <= tmp_22_fu_249_p2[22 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_24_cast_reg_579[22 : 0] <= tmp_24_cast_fu_285_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_2_reg_561 <= x_2_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_2_reg_574 <= y_2_fu_270_p2;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = in_width_read;

assign ap_return_1 = in_height_read;

assign exitcond1_fu_214_p2 = ((x_reg_192 == in_width_read) ? 1'b1 : 1'b0);

assign exitcond_fu_265_p2 = ((y_reg_203 == in_height_read) ? 1'b1 : 1'b0);

assign grp_fu_521_p0 = grp_fu_521_p00;

assign grp_fu_521_p00 = B_reg_615;

assign grp_fu_521_p1 = 13'd25;

assign grp_fu_521_p2 = grp_fu_521_p20;

assign grp_fu_521_p20 = tmp4_fu_363_p2;

assign grp_fu_530_p0 = grp_fu_530_p00;

assign grp_fu_530_p00 = R_reg_601;

assign grp_fu_530_p1 = 15'd32730;

assign grp_fu_530_p2 = ($signed({{1'b0}, {tmp_29_fu_392_p0}}) * $signed(-'h4A));

assign grp_fu_538_p0 = tmp_35_cast1_fu_327_p1;

assign grp_fu_538_p1 = 16'd65442;

assign in_channels_ch1_address0 = tmp_24_cast_fu_285_p1;

assign in_channels_ch2_address0 = tmp_24_cast_fu_285_p1;

assign in_channels_ch3_address0 = tmp_24_cast_fu_285_p1;

assign out_channels_ch1_address0 = tmp_24_cast_reg_579;

assign out_channels_ch1_d0 = (tmp_27_reg_628 + 8'd16);

assign out_channels_ch2_address0 = tmp_24_cast_reg_579;

assign out_channels_ch2_d0 = (tmp_32_fu_498_p4 ^ 8'd128);

assign out_channels_ch3_address0 = tmp_24_cast_reg_579;

assign out_channels_ch3_d0 = (tmp_37_reg_643 ^ 8'd128);

assign p_neg_cast_fu_436_p1 = $signed(p_neg_fu_430_p2);

assign p_neg_fu_430_p2 = (13'd0 - p_shl3_cast9_fu_416_p1);

assign p_shl1_cast_fu_447_p1 = p_shl1_fu_440_p3;

assign p_shl1_fu_440_p3 = {{B_reg_615}, {1'd0}};

assign p_shl2_cast_fu_405_p1 = p_shl2_fu_398_p3;

assign p_shl2_fu_398_p3 = {{B_reg_615}, {7'd0}};

assign p_shl3_cast9_fu_416_p1 = p_shl3_fu_409_p3;

assign p_shl3_cast_fu_420_p1 = p_shl3_fu_409_p3;

assign p_shl3_fu_409_p3 = {{B_reg_615}, {4'd0}};

assign p_shl4_cast_fu_340_p1 = p_shl4_fu_333_p3;

assign p_shl4_fu_333_p3 = {{G_reg_608}, {7'd0}};

assign p_shl5_cast_fu_312_p1 = p_shl5_fu_305_p3;

assign p_shl5_fu_305_p3 = {{R_reg_601}, {6'd0}};

assign p_shl6_cast_fu_323_p1 = p_shl6_fu_316_p3;

assign p_shl6_fu_316_p3 = {{R_reg_601}, {1'd0}};

assign p_shl7_cast_fu_241_p3 = {{tmp_21_fu_237_p1}, {8'd0}};

assign p_shl_cast_fu_229_p3 = {{tmp_fu_225_p1}, {10'd0}};

assign tmp1_fu_357_p2 = (tmp2_cast_fu_353_p1 + p_shl4_cast_fu_340_p1);

assign tmp2_cast_fu_353_p1 = tmp2_fu_347_p2;

assign tmp2_fu_347_p2 = (p_shl6_cast_fu_323_p1 + p_shl5_cast_fu_312_p1);

assign tmp3_cast_fu_373_p1 = grp_fu_521_p3;

assign tmp4_fu_363_p2 = (tmp_35_cast2_fu_330_p1 + 9'd128);

assign tmp6_fu_488_p2 = (tmp_30_reg_633 + 16'd128);

assign tmp8_cast_fu_463_p1 = $signed(tmp8_fu_457_p2);

assign tmp8_fu_457_p2 = (tmp_35_fu_451_p2 + 14'd128);

assign tmp_21_fu_237_p1 = x_reg_192[14:0];

assign tmp_22_fu_249_p2 = (p_shl_cast_fu_229_p3 + p_shl7_cast_fu_241_p3);

assign tmp_24_cast_fu_285_p1 = tmp_24_fu_280_p2;

assign tmp_24_fu_280_p2 = (tmp_cast_fu_276_p1 + tmp_22_reg_566);

assign tmp_26_fu_376_p2 = (tmp3_cast_fu_373_p1 + tmp1_fu_357_p2);

assign tmp_29_fu_392_p0 = tmp_35_cast1_fu_327_p1;

assign tmp_30_fu_424_p2 = (p_shl2_cast_fu_405_p1 - p_shl3_cast_fu_420_p1);

assign tmp_31_fu_493_p2 = ($signed(tmp6_fu_488_p2) + $signed(tmp5_reg_638));

assign tmp_32_fu_498_p4 = {{tmp_31_fu_493_p2[15:8]}};

assign tmp_33_fu_296_p0 = tmp_33_fu_296_p00;

assign tmp_33_fu_296_p00 = in_channels_ch1_q0;

assign tmp_33_fu_296_p2 = (tmp_33_fu_296_p0 * $signed('h7A));

assign tmp_35_cast1_fu_327_p1 = G_reg_608;

assign tmp_35_cast2_fu_330_p1 = G_reg_608;

assign tmp_35_fu_451_p2 = ($signed(p_neg_cast_fu_436_p1) - $signed(p_shl1_cast_fu_447_p1));

assign tmp_36_fu_467_p2 = ($signed(tmp8_cast_fu_463_p1) + $signed(grp_fu_538_p3));

assign tmp_cast_fu_276_p1 = y_reg_203;

assign tmp_fu_225_p1 = x_reg_192[12:0];

assign x_2_fu_219_p2 = (x_reg_192 + 16'd1);

assign y_2_fu_270_p2 = (y_reg_203 + 16'd1);

always @ (posedge ap_clk) begin
    tmp_22_reg_566[7:0] <= 8'b00000000;
    tmp_24_cast_reg_579[63:23] <= 41'b00000000000000000000000000000000000000000;
    tmp_33_reg_623[0] <= 1'b0;
    tmp_30_reg_633[3:0] <= 4'b0000;
end

endmodule //rgb2yuv
